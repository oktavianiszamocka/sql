CREATE TABLE CUSTOMER (
IDC NUMBER(4) PRIMARY KEY,
SURNAME VARCHAR2(10),
FIRSTNAME VARCHAR2(10),
ADDRESS VARCHAR2(100),
PHONE NUMBER(20));

CREATE TABLE AUTHOR (
ID_AUTHOR NUMBER(4) PRIMARY KEY,
SURNAME VARCHAR2(10),
FIRSTNAME VARCHAR2(10));

CREATE TABLE CATEGORIES (
ID_CAT NUMBER(4) PRIMARY KEY,
CNAME VARCHAR2(20));

CREATE TABLE STAFF (
ID_STAFF NUMBER(4) PRIMARY KEY,
SURNAME VARCHAR2(10),
FIRSTNAME VARCHAR2(10),
POSITION VARCHAR2(20),
HIREDATE DATE,
SAL NUMBER(7,2));

CREATE TABLE BOOK(
ID_BOOK NUMBER(4) PRIMARY KEY,
TITLE VARCHAR2(250),
THEAUTHOR NUMBER(4),
FOREIGN KEY(THEAUTHOR) REFERENCES AUTHOR(ID_AUTHOR),
DATEPUBLISH DATE,
ISBN NUMBER(13),
CAT NUMBER(4),
FOREIGN KEY(CAT) REFERENCES CATEGORIES(ID_CAT));

CREATE TABLE COPYOFBOOK(
IDCOPY NUMBER(4) PRIMARY KEY,
ID_BOOK NUMBER(4),
FOREIGN KEY(ID_BOOK) REFERENCES BOOK(ID_BOOK));

CREATE TABLE BORROWING(
IDBORROW NUMBER(4) PRIMARY KEY,
CUS NUMBER(4),
FOREIGN KEY(CUS) REFERENCES CUSTOMER(IDC),
THEBOOK NUMBER(4),
FOREIGN KEY(THEBOOK) REFERENCES COPYOFBOOK(IDCOPY),
DATEOFBORROW DATE,
DATEOFRETURN DATE,
THESTAFF NUMBER(4),
FOREIGN KEY(THESTAFF) REFERENCES STAFF(ID_STAFF));

DESC BORROWING;

INSERT INTO CATEGORIES VALUES
(6711, 'KIDS');
INSERT INTO CATEGORIES VALUES
(6712, 'NON-FICTION');
INSERT INTO CATEGORIES VALUES
(6713, 'FICTION');
INSERT INTO CATEGORIES VALUES
(6714, 'COMPUTER');

INSERT INTO CUSTOMER VALUES
(1345, 'WHITE', 'MARK', 'ul. Jelenia 141 Warszawa', '7972218389');
INSERT INTO CUSTOMER VALUES
(1346, 'PAWLOSKA', 'WOJCIECHA', 'ul. Czerwonego Kapturka 90 Warszawa', '5148313458');
INSERT INTO CUSTOMER VALUES
(1347, 'LADA', 'CIBOR', 'ul. Skalista 49 Warszawa', '5367049128');
INSERT INTO CUSTOMER VALUES
(1348, 'CZERWINSKI', 'URJASZ', 'ul. Maciejkowa 17 Warszawa', '8849842697');
INSERT INTO CUSTOMER VALUES
(1349, 'DABROWSKI', 'LIDIA', 'ul. Ojca Bika Karola 43 Warszawa', '5355231527');
INSERT INTO CUSTOMER VALUES
(1350, 'KAMINSKI', 'JUREK', 'ul. Bardzka 40 Warszawa', '6727071119');
INSERT INTO CUSTOMER VALUES
(1351, 'LADA', 'JOSEF', 'ul. Jedno?ci Narodowej 29 Warszawa', '6747776968');
INSERT INTO CUSTOMER VALUES
(1352, 'KUCHARSKI', 'MARCIN', 'ul. Bardzka 40 Warszawa', '8890790231');

SELECT *
FROM STAFFS;

DESC BOOK;

INSERT INTO STAFF VALUES
(7641, 'OSTRO', 'TADZIO', 'CHIEF', TO_DATE('1-JAN-2017', 'DD-MON-YYYY'), 5000);
INSERT INTO STAFF VALUES
(7642, 'WISNISKI', 'PIOTR', 'COLLECTION DEVELOPER', TO_DATE('2-JAN-2017', 'DD-MON-YYYY'), 4000);
INSERT INTO STAFF VALUES
(7643, 'LADA', 'MACIEK', 'LIBRARIAN', TO_DATE('10-JAN-2017', 'DD-MON-YYYY'), 3400);
INSERT INTO STAFF VALUES
(7644, 'SZAMOCKI', 'JAKUB', 'LIBRARIAN', TO_DATE('1-FEB-2017', 'DD-MON-YYYY'), 3000);
INSERT INTO STAFF VALUES
(7645, 'DABROWSKI', 'MICHAL', 'CLEANER', TO_DATE('10-JAN-2017', 'DD-MON-YYYY'), 2000);

INSERT INTO AUTHOR VALUES
(5431, 'KING', 'STEPHEN');
INSERT INTO AUTHOR VALUES
(5432, 'COELHO', 'PAULO');
INSERT INTO AUTHOR VALUES
(5433, 'WALTZ', 'KENNETH');
INSERT INTO AUTHOR VALUES
(5434, 'CORMENT', 'THOMAS');
INSERT INTO AUTHOR VALUES
(5435, 'BROWN', 'MARGARET');e

INSERT INTO BOOK VALUES
(3421, 'THE OUTSIDER', 5431, TO_DATE('22-MAY-2018', 'DD-MON-YYYY'), '9781501180989', 6713);
INSERT INTO BOOK VALUES
(3422, 'THE ALCHEMIST', 5432, TO_DATE('01-MAY-1993', 'DD-MON-YYYY'), '9780061122415', 6713);
INSERT INTO BOOK VALUES
(3423, 'THE STAND', 5431, TO_DATE('01-MAY-1990', 'DD-MON-YYYY'), '9780385199575', 6713);
INSERT INTO BOOK VALUES
(3424, 'MAN, THE STATE, AND WAR', 5433, TO_DATE('15-APR-2001', 'DD-MON-YYYY'), '9780231125376', 6712);
INSERT INTO BOOK VALUES
(3425, 'INTRODUCTION TO ALGORITHMS', 5434, TO_DATE('10-AUG-2001', 'DD-MON-YYYY'), '9780262531962', 6714);
INSERT INTO BOOK VALUES
(3426, 'GOODNIGHT MOON', 5435, TO_DATE('03-SEP-1947', 'DD-MON-YYYY'), ' 9780060775858', 6711);

INSERT INTO COPYOFBOOK VALUES
(2101, 3421);
INSERT INTO COPYOFBOOK VALUES
(2102, 3421);
INSERT INTO COPYOFBOOK VALUES
(2103, 3421);
INSERT INTO COPYOFBOOK VALUES
(2201, 3422);
INSERT INTO COPYOFBOOK VALUES
(2202, 3422);
INSERT INTO COPYOFBOOK VALUES
(2301, 3423);
INSERT INTO COPYOFBOOK VALUES
(2302, 3423);
INSERT INTO COPYOFBOOK VALUES
(2401, 3424);
INSERT INTO COPYOFBOOK VALUES
(2501, 3425);
INSERT INTO COPYOFBOOK VALUES
(2601, 3426);
INSERT INTO COPYOFBOOK VALUES
(2602, 3426);
INSERT INTO COPYOFBOOK VALUES
(2603, 3426);
INSERT INTO COPYOFBOOK VALUES
(2604, 3426);
INSERT INTO COPYOFBOOK VALUES
(2605, 3426);

SELECT *
FROM CUSTOMER;

DESC BORROWING;

INSERT INTO BORROWING VALUES
(5661, 1345, 2601, TO_DATE('11-JAN-2017', 'DD-MON-YYYY'), TO_DATE('18-JAN-2017', 'DD-MON-YYYY'), 7643);
INSERT INTO BORROWING VALUES
(5662, 1346, 2101, TO_DATE('12-JAN-2017', 'DD-MON-YYYY'), TO_DATE('19-JAN-2017', 'DD-MON-YYYY'), 7643);
INSERT INTO BORROWING VALUES
(5663, 1347, 2102, TO_DATE('14-JAN-2017', 'DD-MON-YYYY'), TO_DATE('21-JAN-2017', 'DD-MON-YYYY'), 7643);
INSERT INTO BORROWING VALUES
(5664, 1348, 2605, TO_DATE('14-JAN-2017', 'DD-MON-YYYY'), TO_DATE('21-JAN-2017', 'DD-MON-YYYY'), 7643);
INSERT INTO BORROWING VALUES
(5665, 1345, 2302, TO_DATE('18-JAN-2017', 'DD-MON-YYYY'), TO_DATE('25-JAN-2017', 'DD-MON-YYYY'), 7643);
INSERT INTO BORROWING VALUES
(5666, 1349, 2601, TO_DATE('18-JAN-2017', 'DD-MON-YYYY'), TO_DATE('25-JAN-2017', 'DD-MON-YYYY'), 7643);
INSERT INTO BORROWING VALUES
(5667, 1350, 2201, TO_DATE('18-JAN-2017', 'DD-MON-YYYY'), TO_DATE('25-JAN-2017', 'DD-MON-YYYY'), 7643);
INSERT INTO BORROWING VALUES
(5668, 1351, 2501, TO_DATE('19-JAN-2017', 'DD-MON-YYYY'), TO_DATE('26-JAN-2017', 'DD-MON-YYYY'), 7643);
INSERT INTO BORROWING VALUES
(5669, 1352, 2601, TO_DATE('20-JAN-2017', 'DD-MON-YYYY'), TO_DATE('27-JAN-2017', 'DD-MON-YYYY'), 7643);
INSERT INTO BORROWING VALUES
(5670, 1347, 2101, TO_DATE('21-JAN-2017', 'DD-MON-YYYY'), TO_DATE('28-JAN-2017', 'DD-MON-YYYY'), 7643);
INSERT INTO BORROWING VALUES
(5671, 1350, 2401, TO_DATE('01-FEB-2017', 'DD-MON-YYYY'), TO_DATE('07-FEB-2017', 'DD-MON-YYYY'), 7644);
INSERT INTO BORROWING VALUES
(5672, 1348, 2501, TO_DATE('03-FEB-2017', 'DD-MON-YYYY'), TO_DATE('10-JAN-2017', 'DD-MON-YYYY'), 7644);

--GENERATE NEWIDC FOR CUSTOMER
SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER NEWCUS
BEFORE INSERT
ON CUSTOMER
FOR EACH ROW
BEGIN
SELECT NVL(MAX(IDC)+1,1345)
INTO :NEW.IDC
FROM CUSTOMER;
END;

DESC CUSTOMER;

INSERT INTO CUSTOMER(SURNAME, FIRSTNAME, ADDRESS, PHONE) VALUES 
('SZAMOCKA', 'INDAH', 'ul. Senatorska 34 Warszawa', 72629288);

SELECT *
FROM CUSTOMER
ORDER BY IDC;

--COUNTING THE NUMBER OF CUSTOMER AFTER ADDING NEW CUSTOMER
CREATE OR REPLACE TRIGGER NUMCUS
AFTER INSERT
ON CUSTOMER
DECLARE X INTEGER;
BEGIN 
SELECT COUNT(IDC)
INTO X
FROM CUSTOMER;
DBMS_OUTPUT.PUT_LINE('WE HAVE '|| X || ' CUSTOMERS');
END;

INSERT INTO CUSTOMER(SURNAME, FIRSTNAME, ADDRESS, PHONE) VALUES 
('DABROWSKA', 'ANA', 'ul. Senatorska 22 Warszawa', 7262738223);

--GENERATE NEWID_CAT FOR CATEGORY
CREATE OR REPLACE TRIGGER NEWCAT
BEFORE INSERT
ON CATEGORIES
FOR EACH ROW
BEGIN
SELECT NVL(MAX(ID_CAT)+1,6711)
INTO :NEW.ID_CAT
FROM CATEGORIES;
END;

DESC CATEGORIES;
SELECT *
FROM CATEGORIES;

INSERT INTO CATEGORIES(CNAME) VALUES ('HOBBY');

--GENERATE NEWID_AUTHOR FOR AUTHOR
CREATE OR REPLACE TRIGGER NEWAUTHOR
BEFORE INSERT
ON AUTHOR
FOR EACH ROW
BEGIN
SELECT NVL(MAX(ID_AUTHOR)+1,5431)
INTO :NEW.ID_AUTHOR
FROM AUTHOR;
END;

SELECT *
FROM AUTHOR
ORDER BY ID_AUTHOR;

INSERT INTO AUTHOR (SURNAME, FIRSTNAME) VALUES ('SZAMOCKA', 'OKTAVIANI');

--GENERATE NEWID_STAFF 
CREATE OR REPLACE TRIGGER NEWSTAFF
BEFORE INSERT
ON STAFF
FOR EACH ROW
BEGIN
SELECT NVL(MAX(ID_STAFF)+1,7641)
INTO :NEW.ID_STAFF
FROM STAFF;
END;

--GENERATE THE HIREDATE OF STAFF ACCORDING CURRENT DATE
CREATE OR REPLACE TRIGGER NEWSTAFFHIREDATE
BEFORE INSERT
ON STAFF
FOR EACH ROW
BEGIN
:NEW.HIREDATE:=SYSDATE;
END;

SELECT *
FROM BORROWING;


INSERT INTO STAFF(SURNAME, FIRSTNAME, POSITION, SAL) VALUES
('BROWN', 'FRANK', 'SECURITY', '2500');

--GENERATE NEWIDbOOK
CREATE OR REPLACE TRIGGER NEWBOOK
BEFORE INSERT
ON BOOK
FOR EACH ROW
BEGIN
SELECT NVL(MAX(ID_BOOK)+1,3421)
INTO :NEW.ID_BOOK
FROM BOOK;
END;

INSERT INTO AUTHOR(SURNAME, FIRSTNAME) VALUES ('HERSEY', 'JOHN');
SELECT * FROM AUTHOR;

DESC BOOK;

INSERT INTO BOOK (TITLE, THEAUTHOR, DATEPUBLISH, ISBN,CAT) VALUES
('HIROSHIMA', 5437, TO_DATE('04-MAR-1989', 'DD-MON-YYYY'), 9780679721031, 6715); 

--GENERATE NEWIDBORROW
SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER NEWBORROW
BEFORE INSERT
ON BORROWING
FOR EACH ROW
BEGIN
SELECT NVL(MAX(IDBORROW)+1,5661)
INTO :NEW.IDBORROW
FROM BORROWING;
END;

--GENERATE DATEOFBORROW ACCORDING CURRENT DATE
CREATE OR REPLACE TRIGGER BORROWDATEOFBOR
BEFORE INSERT
ON BORROWING
FOR EACH ROW
BEGIN
:NEW.DATEOFBORROW:=SYSDATE;
END;

--GENERATE DATEOFRETTURN ACCORDING CUR DATE PLUS 7 DAYS
CREATE OR REPLACE TRIGGER BORROWDATEOFRET
BEFORE INSERT
ON BORROWING
FOR EACH ROW
BEGIN
:NEW.DATEOFRETURN:= SYSDATE + 7;
END;


DESC BORROWING;


SELECT *
FROM BORROWING
ORDER BY IDBORROW;

SELECT * FROM COPYOFBOOK;

INSERT INTO BORROWING (CUS, THEBOOK, THESTAFF) VALUES
(1347, 2605, 7643);

SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER NEWCOP
AFTER INSERT
ON COPYOFBOOK
FOR EACH ROW
BEGIN 
DBMS_OUTPUT.PUT_LINE('BOOK SUCCESSFULLY ADDED');
END;

SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER NEWBORROWINGBOOK
AFTER INSERT
ON BORROWING
FOR EACH ROW
BEGIN 
DBMS_OUTPUT.PUT_LINE('LENDING BOOK PROCESS FINISHED');
END;

--COUNTING NUMBER OF BOOK EACH TIME ADDING BOOK
CREATE OR REPLACE TRIGGER NUMBOOK
AFTER INSERT
ON COPYOFBOOK
DECLARE X INTEGER;
BEGIN 
SELECT COUNT(IDCOPY)
INTO X
FROM COPYOFBOOK;
DBMS_OUTPUT.PUT_LINE('WE HAVE '|| X || ' BOOKS IN OUR COLLECTIONN');
END;

INSERT INTO COPYOFBOOK VALUES (2704, 3427);

SELECT * FROM STAFF;

--PREVENTING EXCEED THE MAX SAL
CREATE OR REPLACE TRIGGER MAXSAL
BEFORE UPDATE
ON STAFF
FOR EACH ROW
BEGIN
IF :NEW.SAL>8000
THEN
:NEW.SAL:=:OLD.SAL;
RAISE_APPLICATION_ERROR(-20003, 'THE SALARY IS TOO MUCH!');
END IF;
END;

UPDATE STAFF
SET SAL=8100
WHERE ID_STAFF=7641;

DELETE FROM CATEGORIES
WHERE ID_CAT = 6716;

--NOTIFYING DELETE PROCCESS SUCCESSFULLY
CREATE OR REPLACE TRIGGER DELCUS
AFTER DELETE
ON CUSTOMER
FOR EACH ROW
BEGIN 
DBMS_OUTPUT.PUT_LINE('DELETED SUCCESSFULLY');
END;

--NOTIFYING UPDATE PROCCESS SUCCESSFULLY
CREATE OR REPLACE TRIGGER UPCUS
AFTER UPDATE
ON CUSTOMER
FOR EACH ROW
BEGIN 
DBMS_OUTPUT.PUT_LINE('UPDATE SUCCESSFULLY');
END;


--LOOKING THE DATA OF SPESIFIC CUSTOMER ACCORDING THEIR ID 
SELECT *
FROM CUSTOMER
WHERE IDC=1346;


--LOOKING THE NUMBER OF BORROWING OF SPESIFIC CUSTOMER ACCORDING THEIR ID 
SELECT  COUNT(IDBORROW)
FROM CUSTOMER, BORROWING
WHERE IDC=1345 AND CUS=IDC;

--LOOKING THE HISTORYOF BORROWING OF SPESIFIC CUSTOMER ACCORDING THEIR ID 
SELECT CUSTOMER.FIRSTNAME, IDBORROW, TITLE, DATEOFBORROW, DATEOFRETURN, STAFF.FIRSTNAME
FROM CUSTOMER, STAFF, BOOK, COPYOFBOOK, BORROWING
WHERE IDC=1345 AND IDC=CUS AND THEBOOK=IDCOPY AND COPYOFBOOK.ID_BOOK=BOOK.ID_BOOK AND THESTAFF=ID_STAFF;

--LOOKING THE HISTORYOF BORROWING OF each customer
SELECT IDC, CUSTOMER.FIRSTNAME, CUSTOMER.SURNAME, IDBORROW, TITLE, DATEOFBORROW, DATEOFRETURN, STAFF.FIRSTNAME
FROM CUSTOMER, STAFF, BOOK, COPYOFBOOK, BORROWING
WHERE CUS=IDC AND THEBOOK=IDCOPY AND COPYOFBOOK.ID_BOOK=BOOK.ID_BOOK AND THESTAFF=ID_STAFF;

--LOOKING THE INFORMATION ABOUT CERTAIN BOOK THE FORGET WHOLE TITLE
SELECT *
FROM BOOK
WHERE TITLE LIKE 'MAN%';

--FIND ALL LIBRARIAN
SELECT FIRSTNAME, SURNAME
FROM STAFF
WHERE POSITION='LIBRARIAN';

--COUNT NUMBER OF LIBRARIAN
SELECT COUNT(ID_STAFF)
FROM STAFF
WHERE POSITION='LIBRARIAN';

--FIND WHO EARN THE MOST
SELECT *
FROM STAFF
WHERE SAL =(
SELECT MAX(SAL)
FROM STAFF);

--FIND THE AVERAGE OF SAL OF EMPLOYEE
SELECT AVG(SAL)
FROM STAFF;

--FIND EMPLOYEE WHO EARN BETWEEN SPESIFIC NUMBER
SELECT FIRSTNAME, SURNAME, SAL
FROM STAFF
WHERE SAL BETWEEN 2000 AND 4000;

--SHOWING MONTHLY AND ANNUAL SAL OF ALL EMPLOYEE
SELECT ID_STAFF, FIRSTNAME, SURNAME, SAL, SAL*12 AS "ANNUAL SAL"
FROM STAFF;

--FIND THE STAFF THAT EMPLOYED IN 2017
SELECT ID_STAFF, FIRSTNAME, SURNAME, HIREDATE
FROM STAFF
WHERE HIREDATE BETWEEN '01-JAN-2017' AND '31-DEC-2017';

--FIND THE NEWEST EMPLOYEE
SELECT ID_STAFF, FIRSTNAME, SURNAME, HIREDATE
FROM STAFF
WHERE HIREDATE=(
SELECT MAX(HIREDATE)
FROM STAFF);


--SHOW BOOK ACCORDING THEIR CATEGORIES
SELECT CNAME, TITLE
FROM CATEGORIES, BOOK
WHERE CAT (+)= ID_CAT;

--COUNT NUMBER OF BOOK EACH CAT
SELECT CNAME, COUNT(ID_BOOK)
FROM BOOK, CATEGORIES
WHERE CAT=ID_CAT
GROUP BY CNAME;

--FIND THE CUSTOMER ONLY WHO EVER BORROW
SELECT *
FROM CUSTOMER
MINUS
SELECT *
FROM CUSTOMER
WHERE NOT IDC IN (
SELECT CUS
FROM BORROWING, CUSTOMER
WHERE CUS=IDC);

--FIND THE NUMBER OF BORROWING
SELECT COUNT(IDBORROW)
FROM BORROWING;

--FIND ANYBODY WHO EARN MORE THAN LIBRARIAN
SELECT FIRSTNAME, SURNAME, SAL
FROM STAFF
WHERE SAL > ALL (
SELECT SAL
FROM STAFF
WHERE POSITION='LIBRARIAN');

--FIND SAL THAT EARN MORE THAN AVERAGE
SELECT FIRSTNAME, SURNAME, SAL
FROM STAFF
WHERE SAL >(
SELECT AVG(SAL)
FROM STAFF);

--FIND CATEGORIES THAT NO BOOK IN IT
SELECT ID_CAT, CNAME
FROM CATEGORIES C
WHERE NOT EXISTS (
SELECT ID_BOOK
FROM BOOK
WHERE CAT=C.ID_CAT);

--FIND THE CATEGORIES WHICH HAS MIN 3 BOOK
SELECT CNAME, COUNT(ID_BOOK)
FROM BOOK, CATEGORIES
WHERE CAT=ID_CAT
GROUP BY CNAME
HAVING COUNT(ID_BOOK)>=3;

--SHOW THE AUTHOR OF EACH BOOK
SELECT TITLE, FIRSTNAME, SURNAME
FROM BOOK, AUTHOR
WHERE THEAUTHOR=ID_AUTHOR;

--FIND THE NUMBER OF BOOK EACH AUTHOR HAVE
SELECT ID_AUTHOR, COUNT(ID_BOOK)
FROM BOOK, AUTHOR
WHERE THEAUTHOR=ID_AUTHOR
GROUP BY ID_AUTHOR;

--FIND THE AUTHOR WHO DONT HAVE BOOK
SELECT FIRSTNAME, SURNAME
FROM AUTHOR A
WHERE NOT EXISTS (
SELECT ID_BOOK
FROM BOOK
WHERE THEAUTHOR=A.ID_AUTHOR);

--FIND THE NUMBER OF BORROWING EACH CUSTOMER
SELECT IDC, COUNT(IDBORROW)
FROM CUSTOMER, BORROWING
WHERE CUS=IDC
GROUP BY IDC
ORDER BY COUNT(IDBORROW) DESC;

--SORT THE BOOK ACCORDING THEIR DATE OF PUBLISH
SELECT TITLE, DATEPUBLISH
FROM BOOK
ORDER BY DATEPUBLISH;

--FIND THE OLDEST BOOK
SELECT TITLE, DATEPUBLISH
FROM BOOK
WHERE DATEPUBLISH = (
SELECT MIN(DATEPUBLISH)
FROM BOOK);

--SHOW THE NUMBER OF SERVICE EACH LIBRARIAN DID
SELECT ID_STAFF, COUNT (IDBORROW)
FROM STAFF, BORROWING
WHERE THESTAFF=ID_STAFF
GROUP BY ID_STAFF;

--SORT ACCORDING THE FREQUENT BOOK TO BORROW
SELECT TITLE, COUNT(IDBORROW)
FROM BOOK, BORROWING, COPYOFBOOK
WHERE THEBOOK=IDCOPY AND COPYOFBOOK.ID_BOOK=BOOK.ID_BOOK
GROUP BY TITLE
ORDER BY COUNT(IDBORROW) DESC ;

--FIND THE MOST FAV BOOK HAVE BEEN BORROWED
SELECT TITLE, COUNT(IDBORROW)
FROM BOOK, BORROWING, COPYOFBOOK
WHERE THEBOOK=IDCOPY AND COPYOFBOOK.ID_BOOK=BOOK.ID_BOOK
GROUP BY TITLE
HAVING COUNT(IDBORROW) = (
SELECT MAX(COUNT(IDBORROW))
FROM BOOK, BORROWING, COPYOFBOOK
WHERE THEBOOK=IDCOPY AND COPYOFBOOK.ID_BOOK=BOOK.ID_BOOK
GROUP BY TITLE);

--FIND THE MOST FREQ CUSTOMER BORROWED BOOK
SELECT IDC, COUNT(IDBORROW)
FROM CUSTOMER, BORROWING
WHERE CUS=IDC
GROUP BY IDC
HAVING COUNT(IDBORROW)=(
SELECT MAX(COUNT(IDBORROW))
FROM CUSTOMER, BORROWING
WHERE CUS=IDC
GROUP BY IDC);
